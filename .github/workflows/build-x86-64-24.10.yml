name: build-x86-64-immortalwrt-24.10

on:
  workflow_dispatch:
    inputs:
      partsize:
        description: '请输入要编译固件大小(单位MB)'
        required: true
        default: '1024'
      include_docker:
        description: '是否编译Docker和多拨插件'
        required: true
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      include_others:
        description: '是否编译拓展插件'
        required: true
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      enable_pppoe:
        description: "是否配置PPPoE拨号信息?"
        required: true
        default: 'no'
        type: choice
        options:
          - 'yes'
          - 'no'
      pppoe_account:
        description: "宽带账号 (若启用PPPoE)"
        required: false
      pppoe_password:
        description: "宽带密码 (若启用PPPoE)"
        required: false

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set executable permissions
        run: chmod +x ${{ github.workspace }}/x86-64/build.sh

      - name: Validate PPPoE Inputs
        run: |
          if [[ "${{ github.event.inputs.enable_pppoe }}" == "yes" ]]; then
            if [[ -z "${{ inputs.pppoe_account }}" || -z "${{ inputs.pppoe_password }}" ]]; then
              echo "Error: PPPoE account and password must be provided when PPPoE is enabled!"
              exit 1
            fi
          fi

      - name: Add other packages
        run: |
          if [[ "${{ github.event.inputs.include_others }}" == "yes" ]]; then
            # 创建packages文件夹
            packagesfolder=${{ github.workspace }}/packages
            mkdir -p $packagesfolder

            # 下载release内容
            curl -sk --connect-timeout 10 "https://api.github.com/repos/liuweilhy/OpenwrtPackages/releases" > index.txt
            if [ $? -ne 0 ]; then
              echo "Failed to get version information, please check the network status."
              exit 1
            fi

            # 最新版本号
            latest_tag=$(grep "tag_name" index.txt | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//;s/ //')

            # 获取下载链接
            grep "browser_download_url" index.txt | grep "$latest_tag" > releases.txt

            # 下载文件函数
            download_file() {
              local url=$1
              local output_dir=$2
              local filename=$(basename "$url")
              echo "Downloading $filename to $output_dir..."
              curl --connect-timeout 30 -m 600 -kLo "$output_dir/$filename" "$url"
              if [ $? -ne 0 ]; then
                echo "Error! Download $filename failed."
                exit 1
              fi
            }
           
            # 提取下载链接
            luci_app_poweroffdevice_=$(grep "browser_download_url" releases.txt | grep "/luci-app-poweroffdevice_" | head -1 | awk -F '"' '{print $4}')
            luci_i18n_poweroffdevice_zh_cn_=$(grep "browser_download_url" releases.txt | grep "/luci-i18n-poweroffdevice-zh-cn_" | head -1 | awk -F '"' '{print $4}')
            simple_obfs_=$(grep "browser_download_url" releases.txt | grep "/simple-obfs_" | head -1 | awk -F '"' '{print $4}')
            tcping_=$(grep "browser_download_url" releases.txt | grep "/tcping_" | head -1 | awk -F '"' '{print $4}')
            trojan_plus_=$(grep "browser_download_url" releases.txt | grep "/trojan-plus_" | head -1 | awk -F '"' '{print $4}')
            tuic_client_=$(grep "browser_download_url" releases.txt | grep "/tuic-client_" | head -1 | awk -F '"' '{print $4}')
            v2ray_geoip_=$(grep "browser_download_url" releases.txt | grep -P "/v2ray-geoip_\d{8}" | head -1 | awk -F '"' '{print $4}')
            v2ray_geosite_=$(grep "browser_download_url" releases.txt | grep -P "/v2ray-geosite_\d{8}" | head -1 | awk -F '"' '{print $4}')
            v2dat_=$(grep "browser_download_url" releases.txt | grep "/v2dat_" | head -1 | awk -F '"' '{print $4}')
            geoview_=$(grep "browser_download_url" releases.txt | grep "/geoview_" | head -1 | awk -F '"' '{print $4}')
            ipt2socks_=$(grep "browser_download_url" releases.txt | grep "/ipt2socks_" | head -1 | awk -F '"' '{print $4}')
            chinadns_ng_=$(grep "browser_download_url" releases.txt | grep "/chinadns-ng_" | head -1 | awk -F '"' '{print $4}')
            dns2socks_=$(grep "browser_download_url" releases.txt | grep "/dns2socks_" | head -1 | awk -F '"' '{print $4}')
            naiveproxy_=$(grep "browser_download_url" releases.txt | grep "/naiveproxy_" | head -1 | awk -F '"' '{print $4}')
            microsocks_=$(grep "browser_download_url" releases.txt | grep "/microsocks_" | head -1 | awk -F '"' '{print $4}')
            xray_core_=$(grep "browser_download_url" releases.txt | grep "/xray-core_" | head -1 | awk -F '"' '{print $4}')
            xray_plugin_=$(grep "browser_download_url" releases.txt | grep "/xray-plugin_" | head -1 | awk -F '"' '{print $4}')
            sing_box_=$(grep "browser_download_url" releases.txt | grep "/sing-box_" | head -1 | awk -F '"' '{print $4}')
            luci_app_passwall_=$(grep "browser_download_url" releases.txt | grep "luci-app-passwall_" | head -1 | awk -F '"' '{print $4}')
            luci_i18n_passwall_zh_cn_=$(grep "browser_download_url" releases.txt | grep "luci-i18n-passwall-zh-cn_" | head -1 | awk -F '"' '{print $4}')
            nikki_=$(grep "browser_download_url" releases.txt | grep -P "/nikki_" | head -1 | awk -F '"' '{print $4}')
            luci_app_nikki_=$(grep "browser_download_url" releases.txt | grep "/luci-app-nikki_" | head -1 | awk -F '"' '{print $4}')
            luci_i18n_nikki_zh_cn_=$(grep "browser_download_url" releases.txt | grep "/luci-i18n-nikki-zh-cn_" | head -1 | awk -F '"' '{print $4}')
            mosdns_=$(grep "browser_download_url" releases.txt | grep "/mosdns_" | head -1 | awk -F '"' '{print $4}')
            luci_app_mosdns_=$(grep "browser_download_url" releases.txt | grep "/luci-app-mosdns_" | head -1 | awk -F '"' '{print $4}')
            luci_i18n_mosdns_zh_cn_=$(grep "browser_download_url" releases.txt | grep "/luci-i18n-mosdns-zh-cn_" | head -1 | awk -F '"' '{print $4}')
            luci_app_adguardhome_=$(grep "browser_download_url" releases.txt | grep "/luci-app-adguardhome_" | head -1 | awk -F '"' '{print $4}')
            luci_app_openclash_=$(grep "browser_download_url" releases.txt | grep "/luci-app-openclash_" | head -1 | awk -F '"' '{print $4}')
            luci_app_taskplan_=$(grep "browser_download_url" releases.txt | grep "/luci-app-taskplan_" | head -1 | awk -F '"' '{print $4}')
           
            # 下载文件到对应目录
            download_file "$luci_app_poweroffdevice_" "$packagesfolder"
            download_file "$luci_i18n_poweroffdevice_zh_cn_" "$packagesfolder"
            download_file "$simple_obfs_" "$packagesfolder"
            download_file "$tcping_" "$packagesfolder"
            download_file "$trojan_plus_" "$packagesfolder"
            download_file "$tuic_client_" "$packagesfolder"
            download_file "$v2ray_geoip_" "$packagesfolder"
            download_file "$v2ray_geosite_" "$packagesfolder"
            download_file "$v2dat_" "$packagesfolder"
            download_file "$geoview_" "$packagesfolder"
            download_file "$ipt2socks_" "$packagesfolder"
            download_file "$chinadns_ng_" "$packagesfolder"
            download_file "$dns2socks_" "$packagesfolder"
            download_file "$naiveproxy_" "$packagesfolder"
            download_file "$microsocks_" "$packagesfolder"
            download_file "$xray_core_" "$packagesfolder"
            download_file "$xray_plugin_" "$packagesfolder"
            download_file "$sing_box_" "$packagesfolder"
            download_file "$luci_app_passwall_" "$packagesfolder"
            download_file "$luci_i18n_passwall_zh_cn_" "$packagesfolder"
            download_file "$nikki_" "$packagesfolder"
            download_file "$luci_app_nikki_" "$packagesfolder"
            download_file "$luci_i18n_nikki_zh_cn_" "$packagesfolder"
            download_file "$mosdns_" "$packagesfolder"
            download_file "$luci_app_mosdns_" "$packagesfolder"
            download_file "$luci_i18n_mosdns_zh_cn_" "$packagesfolder"
            download_file "$luci_app_adguardhome_" "$packagesfolder"
            download_file "$luci_app_openclash_" "$packagesfolder"
            download_file "$mosdns_" "$packagesfolder"
            download_file "$luci_app_taskplan_" "$packagesfolder"

            # 下载 AdGuardHome 核心
            files_usr_bin=${{ github.workspace }}/files/usr/bin
            mkdir -p $files_usr_bin
            adguardhome=$(grep "browser_download_url" releases.txt | grep "/AdGuardHome" | head -1 | awk -F '"' '{print $4}')
            download_file "$adguardhome" "$files_usr_bin"
            chmod +x $files_usr_bin/AdGuardHome
            
            # 下载 clash 核心
            files_etc_openclash_core=${{ github.workspace }}/files/etc/openclash/core
            mkdir -p $files_etc_openclash_core
            clash_meta=$(grep "browser_download_url" releases.txt | grep "/clash_meta" | head -1 | awk -F '"' '{print $4}')
            download_file "$clash_meta" "$files_etc_openclash_core"
            chmod +x $files_etc_openclash_core/clash_meta

            # 全部下载完毕
            echo "Download completed."

            rm -f index.txt releases.txt
          fi

      - name: Build ImmortalWrt-x86-64-efi
        run: |
          partsize="${{ github.event.inputs.partsize }}"
          include_docker="${{ github.event.inputs.include_docker }}"
          include_others="${{ github.event.inputs.include_others }}"
          enable_pppoe="${{ github.event.inputs.enable_pppoe }}"
          pppoe_account="${{ github.event.inputs.pppoe_account }}"
          pppoe_password="${{ github.event.inputs.pppoe_password }}"

          imagename=""
          if [[ "$include_docker" == "yes" ]]; then
            if [[ "$include_others" == "yes" ]]; then
              imagename="docker-plus"
            else
              imagename="docker"
            fi
          else
            if [[ "$include_others" == "yes" ]]; then
              imagename="plus"
            else
              imagename="lite"
            fi
          fi
          
          echo "Building ImmortalWrt-x86-64-efi"
          docker pull immortalwrt/imagebuilder:x86-64-openwrt-24.10.1
          docker run --rm -i \
            --user root \
            -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
            -v "${{ github.workspace }}/files:/home/build/immortalwrt/files" \
            -v "${{ github.workspace }}/packages:/home/build/immortalwrt/packages" \
            -v "${{ github.workspace }}/x86-64/imm.config:/home/build/immortalwrt/.config" \
            -v "${{ github.workspace }}/x86-64/24.10/build.sh:/home/build/immortalwrt/build.sh" \
            -e IMAGENAME=$imagename \
            -e PARTSIZE=$partsize \
            -e INCLUDE_DOCKER=$include_docker \
            -e INCLUDE_OTHERS=$include_others \
            -e ENABLE_PPPOE=$enable_pppoe \
            -e PPPOE_ACCOUNT=$pppoe_account \
            -e PPPOE_PASSWORD=$pppoe_password \
            immortalwrt/imagebuilder:x86-64-openwrt-24.10.1 /bin/bash /home/build/immortalwrt/build.sh

      - name: Generate Firmware SHA-256
        run: |
          cp ${{ github.workspace }}/bin/targets/x86/64/*squashfs-combined-efi.img.gz ${{ github.workspace }}
          for file in *squashfs-combined-efi.img.gz; do
            sha256sum "$file" > "$file.sha256"
            sha256sum -c "$file.sha256"
          done

      - name: Upload ImmortWrt as release assets
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: v1.1
          body_path: ${{ github.workspace }}/info.md
          files: |
            ${{ github.workspace }}/*squashfs-combined-efi.img.gz
            ${{ github.workspace }}/*.sha256
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
